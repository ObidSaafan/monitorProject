generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model actualspend {
  idas      String   @id @default(uuid())
  source    String   @db.VarChar(55)
  value     Float
  date      DateTime
  idproject String   @db.VarChar(55)
  project   project  @relation(fields: [idproject], references: [idproject], onUpdate: Restrict, map: "fk_actualspend_project")

  @@index([idproject], map: "fk_actualspend_project")
}

model budgetedcost {
  idbc      String  @id @default(uuid())
  source    String  @db.VarChar(55)
  value     Float
  idproject String  @db.VarChar(55)
  project   project @relation(fields: [idproject], references: [idproject], onUpdate: Restrict, map: "fk_budgetedcost_project")

  @@index([idproject], map: "fk_budgetedcost_project")
}

model client {
  clientid   String     @id @default(uuid())
  clientname String     @unique @db.VarChar(45)
  clientpm   clientpm[]
  project    project[]
}

model draft {
  draftid     String @id
  draft       Json
  creator     String
  draftholder user   @relation(fields: [creator], references: [iduser], onUpdate: Restrict, map: "creator")

  @@index([creator], map: "creator_idx")
}

model updateapproval {
  id            String         @id
  information   Json
  ucreator      String
  administrator String
  pucreator     user           @relation("updateapproval_pucreator", fields: [ucreator], references: [iduser], onUpdate: Restrict, map: "ucreator")
  puadmin       user           @relation("updateapproval_puadmin", fields: [administrator], references: [iduser], onUpdate: Restrict, map: "administrator")
  approval      approvalStatus
  comment       String?

  @@index([administrator], map: "puadmin_idx")
  @@index([ucreator], map: "pucreator_idx")
}

model clientpm {
  clientpmid String    @id @default(uuid())
  email      String    @unique @db.VarChar(55)
  name       String?   @db.VarChar(45)
  clientid   String
  company    client    @relation(fields: [clientid], references: [clientid], onUpdate: Restrict, map: "clientID")
  project    project[]

  @@index([clientid], map: "clientID_idx")
}

model invoice {
  invoiceid          String    @id @default(uuid())
  source             String    @db.VarChar(55)
  value              Float
  status             String    @db.VarChar(45)
  date_of_submission DateTime
  date_of_receiving  DateTime?
  idproject          String    @db.VarChar(55)
  project            project   @relation(fields: [idproject], references: [idproject], onUpdate: Restrict, map: "fk_invoice_project")

  @@index([idproject], map: "fk_invoice_project")
}

model paymentmilestone {
  idpm           String  @id @default(uuid())
  milestonetext  String  @db.MediumText
  milestonevalue Float
  idproject      String  @db.VarChar(55)
  project        project @relation(fields: [idproject], references: [idproject], onUpdate: Restrict, map: "fk_paymentmilestone_project")

  @@index([idproject], map: "fk_paymentmilestone_project")
}

model project {
  idp                   String              @id @default(uuid())
  idproject             String              @unique @db.VarChar(55)
  projectname           String              @db.VarChar(45)
  description           String?             @db.MediumText
  projecttype           type
  projectstatus         status
  projectstartdate      DateTime            @default(now())
  projectmanager        String
  clientpmid            String
  durationOfproject     Int?
  plannedcompletiondate DateTime?
  currency              currency
  contractvalue         Float
  contractstatus        cstatus
  referencenumber       String              @db.VarChar(45)
  expectedprofit        Float
  actualprofit          Float?
  clientid              String
  comments              String?
  actualspend           actualspend[]
  budgetedcost          budgetedcost[]
  invoice               invoice[]
  paymentmilestone      paymentmilestone[]
  client                client              @relation(fields: [clientid], references: [clientid], onUpdate: Restrict, map: "fk_project_client")
  Sprojectmanager       user                @relation(fields: [projectmanager], references: [iduser], onUpdate: Restrict, map: "projectManager")
  pmclient              clientpm            @relation(fields: [clientpmid], references: [clientpmid], onDelete: Restrict, onUpdate: Restrict, map: "CprojectManager_idx")
  revenuerecognized     revenuerecognized[]

  @@index([clientid], map: "fk_project_client")
  @@index([projectmanager], map: "projectManager_idx")
  @@index([clientpmid], map: "CprojectManager_idx")
}

model revenuerecognized {
  idrr      String   @id @default(uuid())
  date      DateTime
  value     Float
  idproject String   @db.VarChar(55)
  project   project  @relation(fields: [idproject], references: [idproject], onUpdate: Restrict, map: "fk_revenuerecognized_project")

  @@index([idproject], map: "fk_revenuerecognized_project")
}

model role {
  idrole      String @id @default(uuid())
  rolename    String @db.VarChar(45)
  permissions String @db.MediumText
  user        user[]
}

model user {
  iduser    String           @id @default(uuid())
  email     String           @unique(map: "User_email_key") @db.VarChar(80)
  password  String           @db.VarChar(80)
  firstname String           @db.VarChar(45)
  lastname  String           @db.VarChar(45)
  roleid    String
  project   project[]
  role      role             @relation(fields: [roleid], references: [idrole], onUpdate: Restrict, map: "roleID")
  draft     draft[]
  pudrafts  updateapproval[] @relation("updateapproval_pucreator")
  udrafts   updateapproval[] @relation("updateapproval_puadmin")

  @@index([roleid], map: "roleID_idx")
}

enum status {
  notStarted
  inProgress
  onHold
  cancelled
  finished
}

enum type {
  fixedPrice
  TnM
  SnM
  OPEX
}

enum cstatus {
  Signed
  Notsigned
  LOA
}

enum currency {
  AED
  USD
  EUR
  AUD
}

enum approvalStatus {
  Not_Yet
  Approved
  Not_Approved
}
